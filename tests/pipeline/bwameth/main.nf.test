import com.askimed.nf.test.util.FileUtil;

nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"
    tag "bwameth"
    tag "pipeline"

    test("Bwameth Single-End") {
        when {
            params {
                aligner        = "bwameth"
                save_reference = true
                outdir         = "$outputDir"
            }
        }

        then {
            // Clean up anything from previous runs
            FileUtil.deleteDirectory(new File(".nf-test/indexes/"));
            new File(".nf-test/indexes/").mkdirs()
            // Copy the ref genome to a stable location for next tests
            FileUtil.copyDirectory(
                new File("$outputDir/bwameth/reference_genome/bwameth/").getAbsolutePath(),
                new File(".nf-test/indexes/bwameth/").getAbsolutePath()
            )

            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir")).match("single_end_software_versions") },
                { assert snapshot(path("$outputDir/bwameth/alignments/samtools_stats/Ecoli_10K.flagstat"),
                            path("$outputDir/bwameth/alignments/samtools_stats/Ecoli_10K.stats"),
                            path("$outputDir/bwameth/alignments/samtools_stats/SRR389222.flagstat"),
                            path("$outputDir/bwameth/alignments/samtools_stats/SRR389222.stats"),
                            path("$outputDir/bwameth/deduplicated/Ecoli_10K.markdup.sorted.bam"),
                            path("$outputDir/bwameth/deduplicated/Ecoli_10K.markdup.sorted.bam.bai"),
                            path("$outputDir/bwameth/deduplicated/SRR389222.markdup.sorted.bam"),
                            path("$outputDir/bwameth/deduplicated/SRR389222.markdup.sorted.bam.bai"),
                            path("$outputDir/bwameth/reference_genome/").list(),
                            path("$outputDir/cat/SRR389222.merged.fastq.gz"),
                            path("$outputDir/methyldackel/Ecoli_10K.markdup.sorted_CpG.bedGraph"),
                            path("$outputDir/methyldackel/SRR389222.markdup.sorted_CpG.bedGraph"),
                            path("$outputDir/methyldackel/mbias/Ecoli_10K.mbias.txt"),
                            path("$outputDir/methyldackel/mbias/SRR389222.mbias.txt"),
                            path("$outputDir/qualimap/Ecoli_10K/genome_results.txt"),
                            path("$outputDir/qualimap/SRR389222/genome_results.txt")).match("single_end") },
                { assert new File("$outputDir/fastqc/Ecoli_10K_1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/Ecoli_10K_2_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/SRR389222_fastqc.html").exists() },
                { assert new File("$outputDir/multiqc/bwameth/multiqc_report.html").exists() },
                { assert new File("$outputDir/trimgalore/logs/Ecoli_10K_1.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/logs/Ecoli_10K_2.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/logs/SRR389222.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/bwameth/deduplicated/picard_metrics/Ecoli_10K.markdup.sorted.MarkDuplicates.metrics.txt").exists() },
                { assert new File("$outputDir/bwameth/deduplicated/picard_metrics/SRR389222.markdup.sorted.MarkDuplicates.metrics.txt").exists() }
            )
        }
    }

    test("Bwameth Single-End With Index") {
        when {
            params {
                aligner        = "bwameth"
                // Generated by previous test
                bwa_meth_index = ".nf-test/indexes/bwameth/"
                methyl_kit     = true
                outdir         = "$outputDir"
            }
        }

        then {
            assert workflow.failed
        }
    }

    test("Bwameth Single-End RRBS") {
        when {
            params {
                aligner        = "bwameth"
                save_reference = true
                skip_trimming  = true
                rrbs           = true
                save_reference = true
                outdir         = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir")).match("single_end_rrbs_software_versions") },
                { assert snapshot(path("$outputDir/bwameth/alignments/samtools_stats/Ecoli_10K.flagstat"),
                            path("$outputDir/bwameth/alignments/samtools_stats/Ecoli_10K.stats"),
                            path("$outputDir/bwameth/alignments/samtools_stats/SRR389222.flagstat"),
                            path("$outputDir/bwameth/alignments/samtools_stats/SRR389222.stats"),
                            path("$outputDir/bwameth/reference_genome/").list(),
                            path("$outputDir/cat/SRR389222.merged.fastq.gz"),
                            path("$outputDir/methyldackel/Ecoli_10K.sorted_CpG.bedGraph"),
                            path("$outputDir/methyldackel/SRR389222.sorted_CpG.bedGraph"),
                            path("$outputDir/methyldackel/mbias/Ecoli_10K.mbias.txt"),
                            path("$outputDir/methyldackel/mbias/SRR389222.mbias.txt"),
                            path("$outputDir/qualimap/Ecoli_10K/genome_results.txt"),
                            path("$outputDir/qualimap/SRR389222/genome_results.txt")).match("single_end_rrbs") },
                { assert new File("$outputDir/fastqc/Ecoli_10K_1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/Ecoli_10K_2_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/SRR389222_fastqc.html").exists() },
                { assert new File("$outputDir/multiqc/bwameth/multiqc_report.html").exists() }
            )
        }
    }

    test("Bwameth Single End RRBS With Index") {
        when {
            params {
                aligner = "bwameth"
                skip_trimming = true
                rrbs = true
                // Generated by previous test
                bwa_meth_index = ".nf-test/indexes/bwameth/"
                methyl_kit = true
                outdir = "$outputDir"
            }
        }

        then {
            assert workflow.failed
        }
    }

}
